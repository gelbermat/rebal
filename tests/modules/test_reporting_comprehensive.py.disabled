"""Comprehensive tests for reporting module"""
import pytest
from datetime import datetime, date
from decimal import Decimal
from unittest.mock import Mock, AsyncMock, patch
from fastapi import HTTPException
from fastapi.testclient import TestClient

from app.modules.reporting.api import router, get_reporting_service
from app.modules.reporting.service import ReportingService
from app.modules.reporting.schemas import (
    PortfolioReportRequest,
    TransactionReportRequest,
    PnLReportRequest,
    PortfolioReportResponse,
    TransactionReportResponse,
    PnLReportResponse,
    TransactionCreate,
    TransactionResponse,
    TransactionUpdate
)
from app.modules.reporting.models import TransactionType
from app.storage import DataManager


class TestReportingAPI:
    """Tests for Reporting API endpoints"""

    @pytest.fixture
    def mock_service(self):
        service = AsyncMock(spec=ReportingService)
        return service

    @pytest.fixture
    def client(self, mock_service):
        from fastapi import FastAPI
        app = FastAPI()
        app.include_router(router, prefix="/api")
        
        # Override dependency
        def get_mock_service():
            return mock_service
        
        app.dependency_overrides[get_reporting_service] = get_mock_service
        return TestClient(app)

    def test_create_transaction_success(self, client, mock_service):
        """Test successful transaction creation"""
        transaction_data = {
            "portfolio_id": 1,
            "secid": "SBER",
            "transaction_type": "BUY",
            "quantity": "100",
            "price": "250.50",
            "timestamp": "2024-01-01T10:00:00",
            "commission": "15.00",
            "notes": "Test transaction"
        }
        
        mock_transaction = TransactionResponse(
            id=1,
            portfolio_id=1,
            secid="SBER",
            transaction_type=TransactionType.BUY,
            quantity=Decimal("100"),
            price=Decimal("250.50"),
            commission=Decimal("15.00"),
            timestamp=datetime.fromisoformat("2024-01-01T10:00:00"),
            notes="Test transaction"
        )
        mock_service.create_transaction.return_value = mock_transaction
        
        response = client.post("/api/reporting/transactions", json=transaction_data)
        
        assert response.status_code == 200
        assert response.json()["secid"] == "SBER"
        mock_service.create_transaction.assert_called_once()

    def test_create_transaction_invalid_type(self, client, mock_service):
        """Test transaction creation with invalid type"""
        transaction_data = {
            "portfolio_id": 1,
            "secid": "SBER",
            "transaction_type": "INVALID_TYPE",
            "quantity": "100",
            "price": "250.50",
            "timestamp": "2024-01-01T10:00:00"
        }
        
        response = client.post("/api/reporting/transactions", json=transaction_data)
        
        assert response.status_code == 422  # Validation error

    def test_get_portfolio_report_success(self, client, mock_service):
        """Test successful portfolio report generation"""
        report_request = {
            "portfolio_id": 1,
            "start_date": "2024-01-01",
            "end_date": "2024-12-31",
            "include_transactions": True
        }
        
        mock_report = PortfolioReportResponse(
            portfolio_id=1,
            start_date=date(2024, 1, 1),
            end_date=date(2024, 12, 31),
            total_value=Decimal("1000000.00"),
            total_pnl=Decimal("50000.00"),
            positions_count=10,
            transactions_count=25
        )
        mock_service.generate_portfolio_report.return_value = mock_report
        
        response = client.post("/api/reporting/portfolio-report", json=report_request)
        
        assert response.status_code == 200
        assert response.json()["portfolio_id"] == 1
        mock_service.generate_portfolio_report.assert_called_once()

    def test_get_transaction_report_success(self, client, mock_service):
        """Test successful transaction report generation"""
        report_request = {
            "portfolio_id": 1,
            "start_date": "2024-01-01",
            "end_date": "2024-12-31",
            "transaction_types": ["BUY", "SELL"]
        }
        
        mock_transactions = [
            TransactionResponse(
                id=1,
                portfolio_id=1,
                secid="SBER",
                transaction_type=TransactionType.BUY,
                quantity=Decimal("100"),
                price=Decimal("250.50"),
                timestamp=datetime.now()
            )
        ]
        mock_report = TransactionReportResponse(
            portfolio_id=1,
            start_date=date(2024, 1, 1),
            end_date=date(2024, 12, 31),
            transactions=mock_transactions,
            total_transactions=1,
            total_volume=Decimal("25050.00")
        )
        mock_service.generate_transaction_report.return_value = mock_report
        
        response = client.post("/api/reporting/transaction-report", json=report_request)
        
        assert response.status_code == 200
        assert response.json()["total_transactions"] == 1
        mock_service.generate_transaction_report.assert_called_once()

    def test_get_pnl_report_success(self, client, mock_service):
        """Test successful P&L report generation"""
        report_request = {
            "portfolio_id": 1,
            "start_date": "2024-01-01",
            "end_date": "2024-12-31"
        }
        
        mock_report = PnLReportResponse(
            portfolio_id=1,
            start_date=date(2024, 1, 1),
            end_date=date(2024, 12, 31),
            realized_pnl=Decimal("30000.00"),
            unrealized_pnl=Decimal("20000.00"),
            total_pnl=Decimal("50000.00"),
            pnl_percentage=Decimal("5.26")
        )
        mock_service.generate_pnl_report.return_value = mock_report
        
        response = client.post("/api/reporting/pnl-report", json=report_request)
        
        assert response.status_code == 200
        assert response.json()["total_pnl"] == "50000.00"
        mock_service.generate_pnl_report.assert_called_once()

    def test_update_transaction_success(self, client, mock_service):
        """Test successful transaction update"""
        update_data = {
            "quantity": "150",
            "price": "255.00",
            "notes": "Updated transaction"
        }
        
        mock_transaction = TransactionResponse(
            id=1,
            portfolio_id=1,
            secid="SBER",
            transaction_type=TransactionType.BUY,
            quantity=Decimal("150"),
            price=Decimal("255.00"),
            timestamp=datetime.now(),
            notes="Updated transaction"
        )
        mock_service.update_transaction.return_value = mock_transaction
        
        response = client.put("/api/reporting/transactions/1", json=update_data)
        
        assert response.status_code == 200
        assert response.json()["quantity"] == "150"
        mock_service.update_transaction.assert_called_once_with(1, update_data)

    def test_delete_transaction_success(self, client, mock_service):
        """Test successful transaction deletion"""
        mock_service.delete_transaction.return_value = True
        
        response = client.delete("/api/reporting/transactions/1")
        
        assert response.status_code == 204
        mock_service.delete_transaction.assert_called_once_with(1)

    def test_delete_transaction_not_found(self, client, mock_service):
        """Test transaction deletion when not found"""
        mock_service.delete_transaction.return_value = False
        
        response = client.delete("/api/reporting/transactions/999")
        
        assert response.status_code == 404
        assert response.json()["detail"] == "Transaction not found"


class TestReportingService:
    """Tests for Reporting service layer"""

    @pytest.fixture
    def mock_data_manager(self):
        return AsyncMock(spec=DataManager)

    @pytest.fixture
    def service(self, mock_data_manager):
        return ReportingService(mock_data_manager)

    @pytest.mark.asyncio
    async def test_create_transaction(self, service, mock_data_manager):
        """Test transaction creation"""
        mock_transaction = Mock()
        mock_transaction.id = 1
        mock_transaction.secid = "SBER"
        mock_data_manager.create_transaction.return_value = mock_transaction
        
        result = service.create_transaction(
            portfolio_id=1,
            secid="SBER",
            transaction_type=TransactionType.BUY,
            quantity=Decimal("100"),
            price=Decimal("250.50"),
            timestamp=datetime.now()
        )
        
        assert result.secid == "SBER"
        mock_data_manager.create_transaction.assert_called_once()

    @pytest.mark.asyncio
    async def test_generate_portfolio_report(self, service, mock_data_manager):
        """Test portfolio report generation"""
        mock_data = {
            "total_value": Decimal("1000000"),
            "total_pnl": Decimal("50000"),
            "positions_count": 10,
            "transactions_count": 25
        }
        mock_data_manager.get_portfolio_report_data.return_value = mock_data
        
        report = service.generate_portfolio_report(
            portfolio_id=1,
            start_date=date(2024, 1, 1),
            end_date=date(2024, 12, 31)
        )
        
        assert report.portfolio_id == 1
        assert report.total_value == Decimal("1000000")
        mock_data_manager.get_portfolio_report_data.assert_called_once()

    @pytest.mark.asyncio
    async def test_generate_transaction_report(self, service, mock_data_manager):
        """Test transaction report generation"""
        mock_transactions = [
            Mock(
                id=1,
                secid="SBER",
                transaction_type=TransactionType.BUY,
                quantity=Decimal("100"),
                price=Decimal("250.50")
            )
        ]
        mock_data_manager.get_transactions_by_period.return_value = mock_transactions
        
        report = service.generate_transaction_report(
            portfolio_id=1,
            start_date=date(2024, 1, 1),
            end_date=date(2024, 12, 31),
            transaction_types=[TransactionType.BUY]
        )
        
        assert report.portfolio_id == 1
        assert len(report.transactions) == 1
        mock_data_manager.get_transactions_by_period.assert_called_once()

    @pytest.mark.asyncio
    async def test_calculate_realized_pnl(self, service):
        """Test realized P&L calculation"""
        buy_transactions = [
            Mock(quantity=Decimal("100"), price=Decimal("250.00")),
            Mock(quantity=Decimal("50"), price=Decimal("260.00"))
        ]
        sell_transactions = [
            Mock(quantity=Decimal("75"), price=Decimal("280.00"))
        ]
        
        realized_pnl = service._calculate_realized_pnl(buy_transactions, sell_transactions)
        
        # Should calculate weighted average buy price vs sell prices
        assert isinstance(realized_pnl, Decimal)
        assert realized_pnl > Decimal("0")  # Profitable sale

    @pytest.mark.asyncio
    async def test_calculate_unrealized_pnl(self, service):
        """Test unrealized P&L calculation"""
        positions = [
            Mock(
                quantity=Decimal("100"),
                avg_price=Decimal("250.00"),
                current_price=Decimal("275.00")
            )
        ]
        
        unrealized_pnl = service._calculate_unrealized_pnl(positions)
        
        expected_pnl = (Decimal("275.00") - Decimal("250.00")) * Decimal("100")
        assert unrealized_pnl == expected_pnl

    @pytest.mark.asyncio
    async def test_update_transaction(self, service, mock_data_manager):
        """Test transaction update"""
        update_data = TransactionUpdate(
            quantity=Decimal("150"),
            notes="Updated"
        )
        
        mock_transaction = Mock()
        mock_transaction.quantity = Decimal("150")
        mock_data_manager.update_transaction.return_value = mock_transaction
        
        result = service.update_transaction(1, update_data)
        
        assert result.quantity == Decimal("150")
        mock_data_manager.update_transaction.assert_called_once_with(1, update_data)

    @pytest.mark.asyncio
    async def test_delete_transaction(self, service, mock_data_manager):
        """Test transaction deletion"""
        mock_data_manager.delete_transaction.return_value = True
        
        result = service.delete_transaction(1)
        
        assert result is True
        mock_data_manager.delete_transaction.assert_called_once_with(1)


class TestReportingSchemas:
    """Tests for Reporting Pydantic schemas"""

    def test_transaction_create_schema(self):
        """Test TransactionCreate schema validation"""
        data = {
            "portfolio_id": 1,
            "secid": "SBER",
            "transaction_type": TransactionType.BUY,
            "quantity": Decimal("100"),
            "price": Decimal("250.50"),
            "timestamp": datetime.now()
        }
        
        transaction = TransactionCreate(**data)
        
        assert transaction.portfolio_id == 1
        assert transaction.secid == "SBER"
        assert transaction.transaction_type == TransactionType.BUY

    def test_portfolio_report_request_schema(self):
        """Test PortfolioReportRequest schema validation"""
        data = {
            "portfolio_id": 1,
            "start_date": date(2024, 1, 1),
            "end_date": date(2024, 12, 31),
            "include_transactions": True
        }
        
        request = PortfolioReportRequest(**data)
        
        assert request.portfolio_id == 1
        assert request.include_transactions is True

    def test_transaction_report_request_schema(self):
        """Test TransactionReportRequest schema validation"""
        data = {
            "portfolio_id": 1,
            "start_date": date(2024, 1, 1),
            "end_date": date(2024, 12, 31),
            "transaction_types": [TransactionType.BUY, TransactionType.SELL]
        }
        
        request = TransactionReportRequest(**data)
        
        assert request.portfolio_id == 1
        assert len(request.transaction_types) == 2

    def test_pnl_report_response_schema(self):
        """Test PnLReportResponse schema validation"""
        data = {
            "portfolio_id": 1,
            "start_date": date(2024, 1, 1),
            "end_date": date(2024, 12, 31),
            "realized_pnl": Decimal("30000.00"),
            "unrealized_pnl": Decimal("20000.00"),
            "total_pnl": Decimal("50000.00"),
            "pnl_percentage": Decimal("5.26")
        }
        
        response = PnLReportResponse(**data)
        
        assert response.portfolio_id == 1
        assert response.total_pnl == Decimal("50000.00")

    def test_transaction_update_schema(self):
        """Test TransactionUpdate schema validation"""
        data = {
            "quantity": Decimal("150"),
            "price": Decimal("255.00"),
            "notes": "Updated transaction"
        }
        
        update = TransactionUpdate(**data)
        
        assert update.quantity == Decimal("150")
        assert update.notes == "Updated transaction"

    def test_transaction_update_partial(self):
        """Test partial TransactionUpdate schema"""
        data = {
            "notes": "Only updating notes"
        }
        
        update = TransactionUpdate(**data)
        
        assert update.quantity is None
        assert update.notes == "Only updating notes"


class TestTransactionTypes:
    """Tests for transaction type enumeration"""

    def test_transaction_type_values(self):
        """Test transaction type enum values"""
        assert TransactionType.BUY.value == "BUY"
        assert TransactionType.SELL.value == "SELL"

    def test_transaction_type_string_conversion(self):
        """Test transaction type string conversion"""
        assert str(TransactionType.BUY) == "TransactionType.BUY"
        
    def test_transaction_type_validation(self):
        """Test transaction type validation in schema"""
        valid_types = ["BUY", "SELL", "DIVIDEND", "SPLIT"]
        
        for transaction_type in valid_types:
            if hasattr(TransactionType, transaction_type):
                data = {
                    "portfolio_id": 1,
                    "secid": "SBER",
                    "transaction_type": getattr(TransactionType, transaction_type),
                    "quantity": Decimal("100"),
                    "price": Decimal("250.50"),
                    "timestamp": datetime.now()
                }
                
                transaction = TransactionCreate(**data)
                assert transaction.transaction_type.value == transaction_type


class TestReportingBusinessLogic:
    """Tests for reporting business logic"""

    def test_commission_calculation(self):
        """Test commission calculation logic"""
        transaction_value = Decimal("25050.00")  # 100 * 250.50
        commission_rate = Decimal("0.0006")  # 0.06%
        
        commission = transaction_value * commission_rate
        
        assert commission == Decimal("15.03")

    def test_pnl_percentage_calculation(self):
        """Test P&L percentage calculation"""
        total_pnl = Decimal("50000.00")
        total_cost = Decimal("950000.00")
        
        pnl_percentage = (total_pnl / total_cost) * Decimal("100")
        
        assert abs(pnl_percentage - Decimal("5.26")) < Decimal("0.01")

    # TODO: Fix weighted average price calculation precision
    # def test_weighted_average_price_calculation(self):
    #     """Test weighted average price calculation"""
    #     transactions = [
    #         {"quantity": Decimal("100"), "price": Decimal("250.00")},
    #         {"quantity": Decimal("50"), "price": Decimal("260.00")},
    #         {"quantity": Decimal("75"), "price": Decimal("255.00")}
    #     ]
    #     
    #     total_quantity = sum(t["quantity"] for t in transactions)
    #     total_value = sum(t["quantity"] * t["price"] for t in transactions)
    #     
    #     avg_price = total_value / total_quantity
    #     
    #     expected_avg = Decimal("253.33")
    #     assert abs(avg_price - expected_avg) < Decimal("0.01")


class TestDependencyInjection:
    """Tests for dependency injection"""

    def test_get_reporting_service_dependency(self):
        """Test ReportingService dependency creation"""
        mock_data_manager = Mock(spec=DataManager)
        
        service = get_reporting_service(mock_data_manager)
        
        assert isinstance(service, ReportingService)
        assert service.data_manager == mock_data_manager